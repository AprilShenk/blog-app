{"version":3,"sources":["components/shared/Header/Header.jsx","components/shared/Footer/Footer.jsx","components/shared/Layout/Layout.jsx","components/PostCard/PostCard.jsx","services/apiConfig.js","services/posts.js","components/PostCards/PostCards.jsx","screens/Home/Home.jsx","components/Post/Post.jsx","screens/Posts/Posts.jsx","screens/PostCreate/PostCreate.jsx","screens/PostEdit/PostEdit.jsx","screens/PostDetail/PostDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","id","to","Footer","role","aria-label","Layout","props","children","PostCard","apiUrl","src","imgURL","alt","title","apiUrls","window","location","host","api","axios","create","baseURL","getPosts","a","get","res","data","getPost","createPost","post","updatePost","put","deletePost","delete","PostCards","useState","allPosts","setAllPosts","useEffect","posts","fetchPosts","cards","map","idx","_id","key","Home","Post","name","content","author","Posts","postsJSX","index","PostCreate","imgUrl","setPost","isCreated","setCreated","handleChange","event","target","value","handleSubmit","preventDefault","created","onSubmit","type","placeholder","required","onChange","rows","PostEdit","isUpdated","setUpdated","useParams","fetchPost","e","match","params","updated","autoFocus","cols","PostDetail","isLoaded","setLoaded","onClick","App","exact","path","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wWAiBeA,MAbf,WACE,OACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAG,eAAeC,GAAG,KAApD,YACA,yBAAKF,UAAU,SACf,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAG,eAAeC,GAAG,UAApD,WACA,kBAAC,IAAD,CAAMF,UAAU,eAAeC,GAAG,kBAAkBC,GAAG,aAAvD,gBCKSC,G,MAZA,kBACb,yBAAKH,UAAU,UACb,uBAAGA,UAAU,gBAAb,sCACA,uBAAGA,UAAU,iBAAb,yDACyD,IACvD,0BAAMI,KAAK,MAAMC,aAAW,SAA5B,oBCYSC,MAdf,SAAgBC,GAEd,OACE,yBAAKP,UAAU,UACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,mBACZO,EAAMC,UAET,kBAAC,EAAD,Q,oCCKSC,ICjBXC,EDiBWD,EAff,SAAkBF,GAEhB,OACE,yBAAKP,UAAU,aACb,kBAAC,IAAD,CAAMA,UAAU,OAAOE,GAAE,iBAAYK,EAAMN,KACzC,yBAAKD,UAAU,kBACXW,IAAKJ,EAAMK,OACXC,IAAI,kBACR,uBAAGb,UAAU,mBAAmBO,EAAMO,OACtC,8C,iBCTFC,EACQ,8CADRA,EAES,4BAIbL,EAD2B,cAAzBM,OAAOC,SAASC,KACTH,EAEAA,EAGX,IAIeI,EAJHC,IAAMC,OAAO,CACvBC,QAASZ,ICdEa,EAAQ,uCAAG,4BAAAC,EAAA,+EAEFL,EAAIM,IAAI,UAFN,cAEdC,EAFc,yBAGbA,EAAIC,MAHS,oGAAH,qDASRC,EAAO,uCAAG,WAAO3B,GAAP,eAAAuB,EAAA,+EAEDL,EAAIM,IAAJ,iBAAkBxB,IAFjB,cAEbyB,EAFa,yBAGZA,EAAIC,MAHQ,oGAAH,sDASPE,EAAU,uCAAG,WAAOC,GAAP,eAAAN,EAAA,+EAEJL,EAAIW,KAAJ,SAAmBA,GAFf,cAEhBJ,EAFgB,yBAGfA,EAAIC,MAHW,oGAAH,sDASVI,EAAU,uCAAG,WAAO9B,EAAI6B,GAAX,eAAAN,EAAA,+EAEJL,EAAIa,IAAJ,iBAAkB/B,GAAM6B,GAFpB,cAEhBJ,EAFgB,yBAGfA,EAAIC,MAHW,oGAAH,wDASVM,EAAU,uCAAG,WAAOhC,GAAP,eAAAuB,EAAA,+EAEJL,EAAIe,OAAJ,iBAAqBjC,IAFjB,cAEhByB,EAFgB,yBAGfA,EAAIC,MAHW,oGAAH,sDCfRQ,MAnBf,SAAmB5B,GAAQ,IAAD,EACQ6B,mBAAS,IADjB,mBACjBC,EADiB,KACPC,EADO,KAExBC,qBAAU,YACQ,uCAAG,4BAAAf,EAAA,sEACGD,IADH,OACXiB,EADW,OAEjBF,EAAYE,GAFK,2CAAH,qDAIhBC,KACC,IAEL,IAAMC,EAAQL,EAASM,KAAI,SAACH,EAAOI,GAAR,OACpB,kBAAC,EAAD,CAAU3C,GAAIuC,EAAMK,IAAK/B,MAAO0B,EAAM1B,MAAOF,OAAQ4B,EAAM5B,OAAQkC,IAAKF,OAE7E,OACE,yBAAK5C,UAAU,cACZ0C,ICLQK,EAVF,WACX,OACE,kBAAC,EAAD,KACE,yBAAK/C,UAAU,QACb,kBAAC,EAAD,SCSOgD,G,MAbF,SAACzC,GACZ,OACE,oCACE,kBAAC,IAAD,CAAMP,UAAU,OAAOE,GAAE,iBAAYK,EAAMsC,MACzC,wBAAI7C,UAAU,cAAcO,EAAMO,OAClC,yBAAKd,UAAU,WAAWW,IAAKJ,EAAMK,OAAQC,IAAKN,EAAM0C,OACxD,yBAAKjD,UAAU,gBAAgBO,EAAM2C,SACrC,yBAAKlD,UAAU,eAAeO,EAAM4C,YCoB7BC,EA1BD,WAAO,IAAD,EACchB,mBAAS,IADvB,mBACXC,EADW,KACDC,EADC,KAIlBC,qBAAU,YACQ,uCAAG,4BAAAf,EAAA,sEACGD,IADH,OACXiB,EADW,OAEjBF,EAAYE,GAFK,2CAAH,qDAKhBC,KACC,IAEH,IAAMY,EAAWhB,EAASM,KAAI,SAACb,EAAMwB,GAAP,OAC5B,kBAAC,EAAD,CAAMT,IAAKf,EAAKe,IAAK/B,MAAOgB,EAAKhB,MAAOF,OAAQkB,EAAKlB,OAAQsC,QAASpB,EAAKoB,QAASC,OAAQrB,EAAKqB,OAAQL,IAAKQ,OAGhH,OACE,kBAAC,EAAD,KACE,yBAAKtD,UAAU,SACZqD,K,gBCsDME,EA1EI,WAAO,IAAD,EACCnB,mBAAS,CAC/BtB,MAAO,GACPoC,QAAS,GACTM,OAAQ,GACRL,OAAQ,KALa,mBAChBrB,EADgB,KACV2B,EADU,OAQSrB,oBAAS,GARlB,mBAQhBsB,EARgB,KAQLC,EARK,KAUjBC,EAAe,SAACC,GAAW,IAAD,EACNA,EAAMC,OAAtBb,EADsB,EACtBA,KAAMc,EADgB,EAChBA,MACdN,EAAQ,2BACH3B,GADE,kBAEJmB,EAAOc,MAINC,EAAY,uCAAG,WAAOH,GAAP,eAAArC,EAAA,6DACnBqC,EAAMI,iBADa,SAEGpC,EAAWC,GAFd,OAEboC,EAFa,OAGnBP,EAAW,CAAEO,YAHM,2CAAH,sDAMlB,OAAIR,EACK,kBAAC,IAAD,CAAUxD,GAAE,WAInB,kBAAC,EAAD,KACE,0BAAMF,UAAU,cAAcmE,SAAUH,GACtC,2BACEI,KAAK,OACLpE,UAAU,cACVqE,YAAY,QACZN,MAAOjC,EAAKhB,MACZmC,KAAK,QACLqB,UAAQ,EACRC,SAAUX,IAEZ,8BACEQ,KAAK,OACLpE,UAAU,gBACVwE,KAAM,EACNH,YAAY,UACZN,MAAOjC,EAAKoB,QACZD,KAAK,UACLqB,UAAQ,EACRC,SAAUX,IAEZ,2BACEQ,KAAK,OACLpE,UAAU,mBACVqE,YAAY,aACZN,MAAOjC,EAAKlB,OACZqC,KAAK,SACLqB,UAAQ,EACRC,SAAUX,IAEZ,2BACEQ,KAAK,OACLpE,UAAU,eACVqE,YAAY,SACZN,MAAOjC,EAAKqB,OACZF,KAAK,SACLqB,UAAQ,EACRC,SAAUX,IAEZ,4BAAQQ,KAAK,SAASpE,UAAU,iBAAhC,aCkBOyE,G,MApFE,SAAClE,GAAW,IAAD,EACF6B,mBAAS,CAC/BtB,MAAO,GACPF,OAAQ,GACRsC,QAAS,KAJe,mBACnBpB,EADmB,KACb2B,EADa,OAOMrB,oBAAS,GAPf,mBAOnBsC,EAPmB,KAORC,EAPQ,KAQpB1E,EAAO2E,cAAP3E,GAENsC,qBAAU,YACO,uCAAG,4BAAAf,EAAA,sEACGI,EAAQ3B,GADX,OACV6B,EADU,OAEhB2B,EAAQ3B,GAFQ,2CAAH,qDAIf+C,KACC,CAAC5E,IAEJ,IAAM2D,EAAe,SAACkB,GAAO,IAAD,EACFA,EAAEhB,OAAlBb,EADkB,EAClBA,KAAMc,EADY,EACZA,MACdN,EAAQ,2BACH3B,GADE,kBAEJmB,EAAOc,MAINC,EAAY,uCAAG,WAAOc,GAAP,iBAAAtD,EAAA,6DACnBsD,EAAEb,iBACIhE,EAAOM,EAAMwE,MAAMC,OAAnB/E,GAFa,SAGG8B,EAAW9B,EAAI6B,GAHlB,OAGbmD,EAHa,OAInBN,EAAWM,GAJQ,2CAAH,sDAOlB,OAAIP,EACK,kBAAC,IAAD,CAAUxE,GAAE,iBAAYK,EAAMwE,MAAMC,OAAO/E,MAIlD,kBAAC,EAAD,KACE,yBAAKD,UAAU,aACb,yBAAKA,UAAU,mBACb,yBACEA,UAAU,kBACVW,IAAKmB,EAAKlB,OACVC,IAAKiB,EAAKhB,QAEZ,0BAAMqD,SAAUH,GACd,2BACEhE,UAAU,wBACVqE,YAAY,aACZN,MAAOjC,EAAKlB,OACZqC,KAAK,SACLqB,UAAQ,EACRC,SAAUX,MAIhB,0BAAM5D,UAAU,YAAYmE,SAAUH,GACpC,2BACEhE,UAAU,aACVqE,YAAY,QACZN,MAAOjC,EAAKhB,MACZmC,KAAK,QACLqB,UAAQ,EACRY,WAAS,EACTX,SAAUX,IAEZ,8BACE5D,UAAU,mBACVwE,KAAM,GACNW,KAAM,GACNd,YAAY,UACZN,MAAOjC,EAAKoB,QACZD,KAAK,UACLqB,UAAQ,EACRC,SAAUX,IAEZ,4BAAQQ,KAAK,SAASpE,UAAU,eAAhC,eC9CKoF,EAjCI,WAAO,IAAD,EAEChD,mBAAS,MAFV,mBAEhBN,EAFgB,KAEV2B,EAFU,OAGOrB,oBAAS,GAHhB,mBAGhBiD,EAHgB,KAGNC,EAHM,KAIfrF,EAAO2E,cAAP3E,GAWR,OATAsC,qBAAU,YACO,uCAAG,4BAAAf,EAAA,sEACGI,EAAQ3B,GADX,OACV6B,EADU,OAEhB2B,EAAQ3B,GACRwD,GAAU,GAHM,2CAAH,qDAKfT,KACC,CAAC5E,IAECoF,EAKH,kBAAC,EAAD,KACE,yBAAKrF,UAAU,eACb,yBAAKW,IAAKmB,EAAKlB,OAAQC,IAAK,6BAC5B,4BAAKiB,EAAKhB,OACV,4BAAKgB,EAAKqB,QACV,2BAAIrB,EAAKoB,SACT,4BAAQlD,UAAU,eAAc,kBAAC,IAAD,CAAMA,UAAU,YAAYE,GAAE,iBAAY4B,EAAKe,IAAjB,UAA9B,SAChC,4BAAQ7C,UAAU,gBAAgBuF,QAAS,kBAAMtD,EAAWH,EAAKe,OAAjE,YAXG,2CCEI2C,MAdf,WACE,OACE,yBAAKxF,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyF,OAAK,EAACC,KAAK,IAAIC,UAAW5C,IACjC,kBAAC,IAAD,CAAO0C,OAAK,EAACC,KAAK,SAASC,UAAWvC,IACtC,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,YAAYC,UAAWpC,IACzC,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,kBAAkBC,UAAWlB,IAC/C,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,aAAaC,UAAWP,OCL9BQ,QACW,cAA7B5E,OAAOC,SAAS4E,UAEe,UAA7B7E,OAAOC,SAAS4E,UAEhB7E,OAAOC,SAAS4E,SAASd,MACvB,2DCXNe,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0787ebd1.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport \"./Header.css\";\n\nfunction Header() {\n  return (\n    <div className=\"Header\">\n      <Link className=\"header-links\" id=\"header-title\" to=\"/\">Blog App</Link>\n      <div className=\"links\">\n      <Link className=\"header-links\" id=\"header-posts\" to=\"/posts\">Posts |</Link>\n      <Link className=\"header-links\" id=\"header-add-post\" to=\"/add-post\"> Add Post</Link>\n      </div>\n      \n    </div>\n  )\n}\n\nexport default Header","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n  <div className=\"footer\">\n    <p className=\"footer-quote\">\"Blogs are whatever we make them.\"</p>\n    <p className=\"footer-madeby\">\n      Made with love by Andres M, April S, Matt M & Pilar B.{\" \"}\n      <span role=\"img\" aria-label=\"heart\">\n        ❤️\n      </span>\n    </p>\n  </div>\n);\n\nexport default Footer;\n","import React from 'react'\nimport Header from '../Header/Header'\nimport Footer from '../Footer/Footer'\n\n\n//const Layout = {props} =>\nfunction Layout(props) {\n\n  return (\n    <div className=\"layout\">\n      <Header />\n      <div className=\"layout-children\">\n        {props.children}\n      </div>\n      <Footer />\n    </div>\n  )\n\n}\n\nexport default Layout","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './PostCard.css';\n\nfunction PostCard(props) {\n  \n  return (\n    <div className=\"post-card\">\n      <Link className=\"card\" to={`/posts/${props.id}`}>\n        <img className=\"post-card-image\"\n            src={props.imgURL}\n            alt=\"Not available\" />\n        <p className=\"post-card-title\">{props.title}</p>\n        <p>...Read more</p>\n      </Link>\n    </div>\n  )\n}\n\nexport default PostCard","import axios from 'axios';\n\nlet apiUrl;\n\nconst apiUrls = {\n  production: 'https://hardware-blog-api.herokuapp.com/api',\n  development: 'http://localhost:3000/api'\n}\n\nif (window.location.host === 'localhost') {\n  apiUrl = apiUrls.development\n} else {\n  apiUrl = apiUrls.production\n}\n\nconst api = axios.create({\n  baseURL: apiUrl\n})\n\nexport default api","import api from \"./apiConfig\";\n\nexport const getPosts = async () => {\n  try {\n    const res = await api.get(\"/posts\");\n    return res.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getPost = async (id) => {\n  try {\n    const res = await api.get(`/posts/${id}`);\n    return res.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const createPost = async (post) => {\n  try {\n    const res = await api.post(`/posts`, post);\n    return res.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const updatePost = async (id, post) => {\n  try {\n    const res = await api.put(`/posts/${id}`, post);\n    return res.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const deletePost = async (id) => {\n  try {\n    const res = await api.delete(`/posts/${id}`);\n    return res.data;\n  } catch (error) {\n    throw error;\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport PostCard from '../PostCard/PostCard'\nimport { getPosts } from '../../services/posts'\n\nfunction PostCards(props) {\n  const [allPosts, setAllPosts] = useState([]);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const posts = await getPosts()\n      setAllPosts(posts)\n    }\n    fetchPosts()\n  }, [])\n  \nconst cards = allPosts.map((posts, idx) => (\n       <PostCard id={posts._id} title={posts.title} imgURL={posts.imgURL} key={idx} />\n     ))\n  return (\n    <div className=\"post-cards\">\n      {cards}\n    </div>\n  );\n}\nexport default PostCards;\n","import React from \"react\";\nimport Layout from \"../../components/shared/Layout/Layout\";\nimport PostCards from '../../components/PostCards/PostCards';\n\nconst Home = () => {\n  return (\n    <Layout>\n      <div className=\"home\">\n        <PostCards />\n      </div>\n    </Layout>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport './Post.css';\nimport { Link } from 'react-router-dom';\n\nconst Post = (props) => {\n  return (\n    <>\n      <Link className=\"post\" to={`/posts/${props._id}`}>\n        <h3 className=\"post-title\">{props.title}</h3>\n        <img className=\"post-img\" src={props.imgURL} alt={props.name} />\n        <div className=\"post-content\">{props.content}</div>\n        <div className=\"post-author\">{props.author}</div>\n      </Link>\n    </>\n  )\n}\n\nexport default Post\n","import React, { useEffect, useState } from 'react';\nimport Layout from '../../components/shared/Layout/Layout';\nimport Post from '../../components/Post/Post'\nimport { getPosts } from '../../services/posts'\n\nconst Posts = () => {\n  const [allPosts, setAllPosts] = useState([])\n  // const [queriedPosts, setQueriedPosts] = useState([])\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const posts = await getPosts()\n      setAllPosts(posts)\n      // setQueriedPosts(posts)\n    }\n    fetchPosts()\n  }, [])\n\n  const postsJSX = allPosts.map((post, index) => \n    <Post _id={post._id} title={post.title} imgURL={post.imgURL} content={post.content} author={post.author} key={index} />\n  )\n\n  return (\n    <Layout>\n      <div className=\"posts\">\n        {postsJSX}\n      </div>\n    </Layout>\n  );\n};\n\nexport default Posts; ","import Layout from \"../../components/shared/Layout/Layout\";\nimport React, { useState } from \"react\";\nimport { createPost } from \"../../services/posts\";\nimport { Redirect } from \"react-router-dom\";\n\nconst PostCreate = () => {\n  const [post, setPost] = useState({\n    title: \"\",\n    content: \"\",\n    imgUrl: \"\",\n    author: \"\",\n  });\n\n  const [isCreated, setCreated] = useState(false);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setPost({\n      ...post,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const created = await createPost(post);\n    setCreated({ created })\n  };\n\n  if (isCreated) {\n    return <Redirect to={`/posts`} />;\n  }\n\n  return (\n    <Layout>\n      <form className='create-from' onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"input-title\"\n          placeholder=\"Title\"\n          value={post.title}\n          name=\"title\"\n          required\n          onChange={handleChange}\n        />\n        <textarea\n          type=\"text\"\n          className=\"input-content\"\n          rows={8}\n          placeholder=\"Content\"\n          value={post.content}\n          name=\"content\"\n          required\n          onChange={handleChange}\n        />\n        <input\n          type=\"link\"\n          className=\"input-image-link\"\n          placeholder='Image Link'\n          value={post.imgURL}\n          name='imgURL'\n          required\n          onChange={handleChange}\n        />\n        <input\n          type=\"text\"\n          className=\"input-author\"\n          placeholder=\"Author\"\n          value={post.author}\n          name=\"author\"\n          required\n          onChange={handleChange}\n        />\n        <button type=\"submit\" className=\"submit-button\">Submit</button>\n      </form>\n    </Layout>\n  );\n};\n\nexport default PostCreate;\n","\nimport React, { useEffect, useState } from \"react\";\nimport Layout from \"../../components/shared/Layout/Layout\";\nimport \"./PostEdit.css\";\nimport { useParams, Redirect } from \"react-router-dom\";\nimport { getPost, updatePost } from \"../../services/posts\";\n\nconst PostEdit = (props) => {\n  const [post, setPost] = useState({\n    title: \"\",\n    imgURL: \"\",\n    content: \"\",\n  });\n\n  const [isUpdated, setUpdated] = useState(false);\n  let { id } = useParams();\n\n  useEffect(() => {\n    const fetchPost = async () => {\n      const post = await getPost(id);\n      setPost(post);\n    };\n    fetchPost()\n  }, [id]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setPost({\n      ...post,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let { id } = props.match.params;\n    const updated = await updatePost(id, post);\n    setUpdated(updated);\n  };\n\n  if (isUpdated) {\n    return <Redirect to={`/posts/${props.match.params.id}`} />;\n  }\n\n  return (\n    <Layout>\n      <div className=\"post-edit\">\n        <div className=\"image-container\">\n          <img\n            className=\"edit-post-image\"\n            src={post.imgURL}\n            alt={post.title}\n          />\n          <form onSubmit={handleSubmit}>\n            <input\n              className=\"edit-input-image-link\"\n              placeholder=\"Image Link\"\n              value={post.imgURL}\n              name=\"imgURL\"\n              required\n              onChange={handleChange}\n            />\n          </form>\n        </div>\n        <form className=\"edit-form\" onSubmit={handleSubmit}>\n          <input\n            className=\"input-name\"\n            placeholder=\"Title\"\n            value={post.title}\n            name=\"title\"\n            required\n            autoFocus\n            onChange={handleChange}\n          />\n          <textarea\n            className=\"textarea-content\"\n            rows={10}\n            cols={78}\n            placeholder=\"Content\"\n            value={post.content}\n            name=\"content\"\n            required\n            onChange={handleChange}\n          />\n          <button type=\"submit\" className=\"save-button\" >Submit</button>\n        </form>\n      </div>\n    </Layout>\n  );\n};\n\nexport default PostEdit;","import Layout from '../../components/shared/Layout/Layout'\nimport React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { getPost, deletePost } from '../../services/posts';\n\nconst PostDetail = () => {\n\n  const [post, setPost] = useState(null);\n  const [isLoaded, setLoaded] = useState(false);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchPost = async () => {\n      const post = await getPost(id)\n      setPost(post)\n      setLoaded(true)\n    }\n    fetchPost()\n  }, [id])\n\n  if (!isLoaded) {\n    return <h2>Loading...</h2>\n  }\n\n  return (\n    <Layout>\n      <div className=\"post-detail\">\n        <img src={post.imgURL} alt={\"no-information-available\"} />\n        <h3>{post.title}</h3>\n        <h6>{post.author}</h6>\n        <p>{post.content}</p>\n        <button className=\"edit-button\"><Link className=\"edit-link\" to={`/posts/${post._id}/edit`}>Edit</Link></button>\n        <button className=\"delete-button\" onClick={() => deletePost(post._id)}>Delete</button>\n      </div>\n    </Layout>\n  );\n};\n\nexport default PostDetail;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Home from './screens/Home/Home';\nimport Posts from './screens/Posts/Posts';\nimport PostCreate from './screens/PostCreate/PostCreate';\nimport PostEdit from './screens/PostEdit/PostEdit';\nimport PostDetail from './screens/PostDetail/PostDetail';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path='/' component={Home} />\n        <Route exact path='/posts' component={Posts} />\n        <Route exact path='/add-post' component={PostCreate} />\n        <Route exact path='/posts/:id/edit' component={PostEdit} />\n        <Route exact path='/posts/:id' component={PostDetail} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}